prototype(Sitegeist.Kaleidoscope:Source) < prototype(Neos.Fusion:Component) {

    @propTypes {
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
    }

    imageSource = null
    srcset = null
    sizes = null
    width = null
    height = null
    format = null
    type = null
    media = null
    renderDimensionAttributes = true

    renderer = Neos.Fusion:Component {

        @context {
            imageSource = ${props.imageSource || __imageSource}
            format = ${props.format || __format}
            width = ${props.width || __width}
            height = ${props.height || __height}
            srcset = ${props.srcset || __srcset}
            sizes = ${props.sizes || __sizes}
        }

        @if.hasImageSource = ${imageSource && Type.instance(imageSource, '\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
        isScalableSource = ${imageSource && Type.instance(imageSource, '\\Sitegeist\\Kaleidoscope\\Domain\\ScalableImageSourceInterface')}

        imageSource = ${imageSource}
        imageSource.@process.applyWidth = ${width ? value.withWidth(width) : value}
        imageSource.@process.applyHeight = ${height ? value.withHeight(height) : value}
        imageSource.@process.applyFormat = ${format ? value.withFormat(format) : value}

        type = ${format ? 'image/' + format : props.type}
        srcset = ${srcset}
        sizes = ${sizes}
        media = ${props.media}
        renderDimensionAttributes = ${props.renderDimensionAttributes}

        renderer = afx`
            <source @if.has={props.imageSource}
                srcset={props.imageSource.srcset(props.srcset)}
                srcset.@if.isScalable={props.srcset && props.isScalableSource}
                sizes={props.sizes}
                srcset.@if.isScalable={props.sizes && props.isScalableSource}
                sizes.@process.join={Type.isArray(value) ? Array.join(value, ', ') : value}
                type={props.type}
                media={props.media}
                width={props.renderDimensionAttributes ? props.imageSource.currentWidth : null}
                height={props.renderDimensionAttributes ? props.imageSource.currentHeight : null}
            />
        `
    }
}
